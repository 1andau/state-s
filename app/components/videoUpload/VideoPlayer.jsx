"use client";
import { useEffect, useRef, useState } from 'react';
import Hls from 'hls.js';
import styles from './videoPlayer.module.css';

const VideoPlayer = ({ videoUrl, isProcessing }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const videoRef = useRef(null);
  const previewRef = useRef(null);
  const [showProcessing, setShowProcessing] = useState(true);
  const [retryCount, setRetryCount] = useState(0);
  const loopTimeoutRef = useRef(null); // –†–µ—Ñ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —Ü–∏–∫–ª–∞

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (loopTimeoutRef.current) {
        clearTimeout(loopTimeoutRef.current);
      }
    };
  }, []);

  // –ú–∞–≥–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ü–∏–∫–ª–æ–º
  useEffect(() => {
    if (!previewRef.current || !videoUrl) return;

    const video = previewRef.current;
    let hls;

    const startLoop = () => {
      video.currentTime = 0;
      video.play()
        .then(() => {
          loopTimeoutRef.current = setTimeout(() => {
            startLoop(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
          }, 3000);
        })
        .catch(e => console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e));
    };

    const handleSuccess = () => {
      console.log('‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      setShowProcessing(false);
      startLoop(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    };

    if (Hls.isSupported()) {
      hls = new Hls({
        maxMaxBufferLength: 1,
        xhrSetup: (xhr) => {
          xhr.withCredentials = false;
        }
      });

      hls.on(Hls.Events.MANIFEST_PARSED, handleSuccess);
      hls.on(Hls.Events.ERROR, () => {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é...');
        setRetryCount(prev => prev + 1);
      });

      hls.loadSource(videoUrl);
      hls.attachMedia(video);
    } else {
      video.src = videoUrl;
      video.addEventListener('loadeddata', handleSuccess);
      video.addEventListener('error', () => {
        console.log('üîÑ –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
        setRetryCount(prev => prev + 1);
      });
    }

    return () => {
      if (loopTimeoutRef.current) {
        clearTimeout(loopTimeoutRef.current);
      }
      if (hls) hls.destroy();
    };
  }, [videoUrl, retryCount]);

  // –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–µ–µ—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    if (!isPlaying || !videoRef.current) return;
    const video = videoRef.current;
    let hls;

    if (Hls.isSupported()) {
      hls = new Hls();
      hls.loadSource(videoUrl);
      hls.attachMedia(video);
      hls.on(Hls.Events.MANIFEST_PARSED, () => video.play());
    } else {
      video.src = videoUrl;
      video.addEventListener('loadeddata', () => video.play());
    }

    return () => {
      if (hls) hls.destroy();
    };
  }, [isPlaying, videoUrl]);

  return (
    <div className={styles.videoContainer}>
      {/* –û–≤–µ—Ä–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
      {showProcessing && (
        <div className={styles.processingOverlay}>
          <div className={styles.processingSpinner}></div>
          <p>Video is processing...</p>
        </div>
      )}

      {/* –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é */}
      <div className={styles.preview} onClick={() => setIsPlaying(true)}>
        <video
          ref={previewRef}
          muted
          playsInline
          className={styles.previewVideo}
        />
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–µ–µ—Ä–∞ */}
      {isPlaying && (
        <div className={styles.modalOverlay} onClick={() => setIsPlaying(false)}>
          <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
            <button className={styles.closeButton} onClick={() => setIsPlaying(false)}>
              &times;
            </button>
            <video
              ref={videoRef}
              controls
              autoPlay
              className={styles.videoPlayer}
            />
            <div className={styles.descriptionContainer}>
              <span className={styles.nickname}>ASSET HOLD</span>
              <p className={styles.videoDescription}>
                This is a sample video description.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VideoPlayer;